{"version":3,"sources":["components/Nav.jsx","components/node/Node.jsx","constants/NodeState.js","constants/AnimationState.js","algorithms/dijkstra.js","services/visualizationService.js","components/board/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Nav","Menu","inverted","Item","position","Node","node","handleClick","row","column","distanceToDisplay","state","className","onClick","Infinity","NodeState","AnimationState","updateUnvisitedDistances","closestNode","grid","unvisitedNeighbors","getUnvisitedNeighbors","unvisitedNeighbor","distance","previousNode","push","length","filter","isVisited","sortByDistance","nodes","sort","a","b","flattenGrid","results","forEach","endpoint","INITIAL_STATE","Board","useState","setGrid","nodesVisited","setNodesVisited","timeToComplete","setTimeToComplete","animationState","setAnimationState","sourcePlaced","setSourcePlaced","targetPlaced","setTargetPlaced","currentTarget","setCurrentTarget","numWalls","setNumWalls","history","setHistory","portalOpen","setPortalOpen","useEffect","getInitialGrid","currentRow","createNode","dijkstra","timeStart","performance","now","visitedNodes","newGrid","Object","assign","unvisitedNodes","shift","getVisitedNodes","shortestPath","finishNode","currentNode","unshift","getShortestPath","timeEnd","modifiedGrid","request","created","Date","axios","post","then","response","catch","error","console","log","createNewViz","index","setTimeout","slice","newNode","handleClosePortal","getAllVisualizations","get","data","restoreVisualization","id","getVisualization","Button","disabled","Portal","closeOnTriggerClick","openOnTriggerClick","trigger","open","onOpen","onClose","Segment","style","left","top","zIndex","Header","overflow","height","List","margin","map","viz","key","toFixed","moment","fromNow","Container","paddingTop","rowIndex","nodeIndex","col","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.56fe4b09.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => {\n  return (\n    <Menu inverted>\n      <Menu.Item>Pathfinding Visualizer</Menu.Item>\n      <Menu.Item position=\"right\">Created by Gregory Cheng</Menu.Item>\n    </Menu>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"./Node.css\";\n\nconst Node = ({ node, handleClick }) => {\n  const { row, column, distanceToDisplay, state } = node;\n  return (\n    <div className={`node ${state}`} onClick={() => handleClick(row, column)}>\n      {distanceToDisplay === Infinity ? \"?\" : distanceToDisplay}\n    </div>\n  );\n};\n\nexport default Node;\n","export const NodeState = {\n  EMPTY: \"empty\",\n  WALL: \"wall\",\n  VISITED: \"visited\",\n  SOURCE: \"source\",\n  TARGET: \"target\",\n  SHORTEST_PATH: \"shortest-path\",\n};\n","export const AnimationState = {\n  READY: \"ready\",\n  IN_PROGRESS: \"in_progress\",\n  DONE: \"done\",\n};\n","// Dijkstra's algorithm is a weighted algorithm that returns the shortest path.\n// It generates a shortest path tree with the given node as the root. As the algorithm runs,\n// It keeps track of two things:\n// 1) Vertices included in this shortest path tree (visted nodes)\n// 2) Vertices not included in the shortest path tree (unvisited nodes)\n// In each step of the algorithm, we find a vertex within the 2nd (unvisited) set and has the shortest\n// distance from the source. We then update the distance value.\n// In doing this, we keep track of the previous node that led us a a given node. Once the\n// algorithm completes, this 'previousNode' field gives us the path from the source to the target.\n\nimport { NodeState } from \"../constants/NodeState\";\n\nexport const getVisitedNodes = (grid) => {\n  // Create a deep copy fo the grid\n  const newGrid = [];\n  for (let row = 0; row < 30; row++) {\n    const currentRow = [];\n    for (let column = 0; column < 45; column++) {\n      currentRow.push(Object.assign(grid[row][column]));\n    }\n    newGrid.push(currentRow);\n  }\n\n  const visitedNodes = [];\n  const unvisitedNodes = flattenGrid(newGrid);\n\n  // Keep iterating through this loop as long as nodes exist that are not visited\n  while (!!unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    // Skipping all walls\n    if (!closestNode || closestNode.state === NodeState.WALL) continue;\n\n    // If the closest node has a distance of Infinity, we have reached a trap\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    // If we have reached the target, return the visited nodes\n    if (closestNode.state === NodeState.TARGET) return visitedNodes;\n\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n\n    // Before going to the next iteration of the loop, we must update distances.\n    updateUnvisitedDistances(closestNode, newGrid);\n  }\n\n  return [];\n};\n\nconst updateUnvisitedDistances = (closestNode, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\n  for (const unvisitedNeighbor of unvisitedNeighbors) {\n    unvisitedNeighbor.distance = closestNode.distance + 1;\n    unvisitedNeighbor.previousNode = closestNode;\n  }\n};\n\n// Given a node, retrieve all unvisited neighbors to update their distance.\nconst getUnvisitedNeighbors = (closestNode, grid) => {\n  const unvisitedNeighbors = [];\n\n  const { row, column } = closestNode;\n\n  if (closestNode.column > 0) unvisitedNeighbors.push(grid[row][column - 1]);\n  if (closestNode.row > 0) unvisitedNeighbors.push(grid[row - 1][column]);\n\n  if (closestNode.column < grid[0].length - 1)\n    unvisitedNeighbors.push(grid[row][column + 1]);\n  if (closestNode.row < grid.length - 1)\n    unvisitedNeighbors.push(grid[row + 1][column]);\n\n  return unvisitedNeighbors.filter((node) => !node.isVisited);\n};\n\n// Sort a list of nodes distance given a comparator.\nconst sortByDistance = (nodes) => {\n  return nodes.sort((a, b) => a.distance - b.distance);\n};\n\n// Given a grid, return a single array containing all nodes.\nconst flattenGrid = (grid) => {\n  const results = [];\n  grid.forEach((row) => {\n    row.forEach((node) => results.push(node));\n  });\n  return results;\n};\n\nexport const getShortestPath = (finishNode) => {\n  const shortestPath = [];\n  var currentNode = finishNode;\n  while (currentNode != null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPath;\n};\n","import axios from \"axios\";\n\nconst endpoint = \"http://127.0.0.1:5000/\";\n\nexport const createNewViz = (\n  grid,\n  currentTarget,\n  timeToComplete,\n  numWalls,\n  nodesVisited,\n  shortestPath\n) => {\n  // Filtering the properties we want from the grid to pass to the database\n  const modifiedGrid = [];\n  for (let row = 0; row < 30; row++) {\n    const currentRow = [];\n    for (let column = 0; column < 45; column++) {\n      const currentNode = grid[row][column];\n      currentRow.push({\n        row: currentNode.row,\n        column: currentNode.column,\n        state: currentNode.state,\n      });\n    }\n    modifiedGrid.push(currentRow);\n  }\n\n  const request = {\n    grid: modifiedGrid,\n    currentTarget,\n    timeToComplete,\n    numWalls,\n    nodesVisited,\n    shortestPath,\n    created: new Date(),\n  };\n\n  return axios\n    .post(`${endpoint}new-visualization`, request)\n    .then((response) => {\n      return response;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getVisualizations = () => {\n  return axios\n    .get(`${endpoint}visualizations`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => {\n      return error;\n    });\n};\n\nexport const getVisualization = (id) => {\n  return axios\n    .get(`${endpoint}restore-visualization/${id}`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => {\n      return error;\n    });\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Button,\n  Header,\n  Portal,\n  Segment,\n  List,\n} from \"semantic-ui-react\";\nimport Node from \"../node/Node\";\nimport { NodeState } from \"../../constants/NodeState\";\nimport { AnimationState } from \"../../constants/AnimationState\";\nimport { getVisitedNodes, getShortestPath } from \"../../algorithms/dijkstra\";\nimport {\n  createNewViz,\n  getVisualizations,\n  getVisualization,\n} from \"../../services/visualizationService\";\nimport moment from \"moment\";\n\nconst INITIAL_STATE = {\n  sourceRow: 14,\n  sourceColumn: 5,\n  targetRow: 14,\n  targetColumn: 40,\n};\n\nconst Board = () => {\n  const [grid, setGrid] = useState([[]]);\n  const [nodesVisited, setNodesVisited] = useState(0);\n  const [timeToComplete, setTimeToComplete] = useState(0);\n  const [animationState, setAnimationState] = useState(AnimationState.READY);\n  const [sourcePlaced, setSourcePlaced] = useState(true);\n  const [targetPlaced, setTargetPlaced] = useState(true);\n  const [currentTarget, setCurrentTarget] = useState({\n    row: INITIAL_STATE.targetRow,\n    column: INITIAL_STATE.targetColumn,\n  });\n  const [numWalls, setNumWalls] = useState(0);\n  const [history, setHistory] = useState([]);\n  const [portalOpen, setPortalOpen] = useState(false);\n\n  const TIME_INTERVAL_LENGTH = 100;\n\n  useEffect(() => {\n    setGrid(getInitialGrid());\n    // eslint-disable-next-line\n  }, []);\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 30; row++) {\n      const currentRow = [];\n      for (let column = 0; column < 45; column++) {\n        currentRow.push(createNode(row, column, Infinity, NodeState.EMPTY));\n      }\n      grid.push(currentRow);\n    }\n    grid[INITIAL_STATE.sourceRow][INITIAL_STATE.sourceColumn] = createNode(\n      INITIAL_STATE.sourceRow,\n      INITIAL_STATE.sourceColumn,\n      0,\n      NodeState.SOURCE,\n      true\n    );\n    grid[INITIAL_STATE.targetRow][INITIAL_STATE.targetColumn] = createNode(\n      INITIAL_STATE.targetRow,\n      INITIAL_STATE.targetColumn,\n      Infinity,\n      NodeState.TARGET,\n      false\n    );\n    return grid;\n  };\n\n  const createNode = (row, column, distance, state, isVisited) => {\n    return {\n      row,\n      column,\n      distance,\n      distanceToDisplay: distance,\n      state,\n      isVisited,\n    };\n  };\n\n  const dijkstra = () => {\n    const timeStart = performance.now();\n    const visitedNodes = getVisitedNodes(grid);\n    const shortestPath = getShortestPath(\n      grid[currentTarget.row][currentTarget.column]\n    );\n    const timeEnd = performance.now();\n    setTimeToComplete(timeEnd - timeStart);\n    createNewViz(\n      grid,\n      currentTarget,\n      timeEnd - timeStart,\n      numWalls,\n      visitedNodes.length,\n      shortestPath.length\n    );\n\n    visitedNodes.forEach((node, index) => {\n      // Skipping the first one in order to preserve the style\n      if (index !== 0) {\n        setTimeout(() => {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...node,\n            state: NodeState.VISITED,\n            distanceToDisplay: node.distance,\n          };\n          newGrid[node.row][node.column] = newNode;\n          setGrid(newGrid);\n          setNodesVisited((nodesVisited) => nodesVisited + 1);\n        }, index * TIME_INTERVAL_LENGTH);\n      }\n    });\n\n    shortestPath.forEach((node, index) => {\n      if (index !== 0 && index !== shortestPath.length - 1) {\n        setTimeout(() => {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...node,\n            distanceToDisplay: node.distance,\n            state: NodeState.SHORTEST_PATH,\n          };\n          newGrid[node.row][node.column] = newNode;\n          setGrid(newGrid);\n        }, visitedNodes.length * TIME_INTERVAL_LENGTH + index * TIME_INTERVAL_LENGTH);\n      }\n      if (index === shortestPath.length - 1) {\n        setTimeout(() => {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...node,\n            distanceToDisplay: node.distance,\n          };\n          newGrid[node.row][node.column] = newNode;\n          setGrid(newGrid);\n        }, visitedNodes.length * TIME_INTERVAL_LENGTH + (shortestPath.length - 1) * TIME_INTERVAL_LENGTH);\n      }\n    });\n\n    // set time to complete\n    setTimeout(() => {\n      setAnimationState(AnimationState.DONE);\n    }, visitedNodes.length * TIME_INTERVAL_LENGTH + shortestPath.length * TIME_INTERVAL_LENGTH);\n  };\n\n  const reset = () => {\n    setGrid(getInitialGrid());\n    setAnimationState(AnimationState.READY);\n    setNodesVisited(0);\n    setTimeToComplete(0);\n  };\n\n  const handleClick = (row, column) => {\n    // Only handle changes if a visualization is not running\n    if (animationState === AnimationState.READY) {\n      // If clicking on a source to remove\n      if (grid[row][column].state === NodeState.SOURCE) {\n        const newGrid = grid.slice();\n        const newNode = {\n          ...grid[row][column],\n          state: NodeState.EMPTY,\n          distance: Infinity,\n          distanceToDisplay: Infinity,\n        };\n        newGrid[row][column] = newNode;\n        setGrid(newGrid);\n        setSourcePlaced(false);\n      }\n\n      // If clicking on a target to remove\n      else if (grid[row][column].state === NodeState.TARGET) {\n        const newGrid = grid.slice();\n        const newNode = {\n          ...grid[row][column],\n          state: NodeState.EMPTY,\n          distance: Infinity,\n          distanceToDisplay: Infinity,\n        };\n        newGrid[row][column] = newNode;\n        setGrid(newGrid);\n        setTargetPlaced(false);\n      }\n\n      // If clicking on a wall, empty it\n      else if (grid[row][column].state === NodeState.WALL) {\n        const newGrid = grid.slice();\n        const newNode = {\n          ...grid[row][column],\n          state: NodeState.EMPTY,\n        };\n        newGrid[row][column] = newNode;\n        setNumWalls((numWalls) => numWalls - 1);\n        setGrid(newGrid);\n      }\n\n      // If clicking on an empty node or a wall\n      else if (grid[row][column].state === NodeState.EMPTY) {\n        // If a source doesn't exist, create a new source\n        if (!sourcePlaced) {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...grid[row][column],\n            state: NodeState.SOURCE,\n            distance: 0,\n            distanceToDisplay: 0,\n          };\n          newGrid[row][column] = newNode;\n          setGrid(newGrid);\n          setSourcePlaced(true);\n        }\n\n        // If a target doesn't exist, create a new target\n        else if (!targetPlaced) {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...grid[row][column],\n            state: NodeState.TARGET,\n            distance: Infinity,\n            distanceToDisplay: Infinity,\n          };\n          newGrid[row][column] = newNode;\n          setGrid(newGrid);\n          setTargetPlaced(true);\n          setCurrentTarget({ row, column });\n        }\n\n        // Create a wall if we encounter an empty node\n        else {\n          const newGrid = grid.slice();\n          const newNode = {\n            ...grid[row][column],\n            state: NodeState.WALL,\n            distance: Infinity,\n            distanceToDisplay: Infinity,\n          };\n          newGrid[row][column] = newNode;\n          setNumWalls((numWalls) => numWalls + 1);\n          setGrid(newGrid);\n        }\n      }\n    }\n  };\n\n  const handleOpenPortal = () => {\n    setPortalOpen(true);\n    getAllVisualizations();\n  };\n\n  const handleClosePortal = () => {\n    setPortalOpen(false);\n  };\n\n  const getAllVisualizations = () => {\n    if (history.length === 0) {\n      getVisualizations().then((data) => setHistory(data.results));\n    }\n  };\n\n  const restoreVisualization = (id, numWalls) => {\n    getVisualization(id)\n      .then((response) => {\n        const grid = response.grid;\n        const newGrid = [];\n        for (let row = 0; row < 30; row++) {\n          const currentRow = [];\n          for (let column = 0; column < 45; column++) {\n            currentRow.push({\n              ...grid[row][column],\n              distance:\n                grid[row][column].state === NodeState.SOURCE ? 0 : Infinity,\n              distanceToDisplay:\n                grid[row][column].state === NodeState.SOURCE ? 0 : Infinity,\n              isVisited: false,\n            });\n          }\n          newGrid.push(currentRow);\n        }\n        setGrid(newGrid);\n        setNodesVisited(0);\n        setTimeToComplete(0);\n        setAnimationState(AnimationState.READY);\n        setSourcePlaced(true);\n        setTargetPlaced(true);\n        setCurrentTarget(response.currentTarget);\n        setNumWalls(numWalls);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setAnimationState(AnimationState.IN_PROGRESS);\n          dijkstra();\n        }}\n        disabled={animationState !== AnimationState.READY}\n      >\n        Dijkstra\n      </Button>\n      <Button\n        onClick={() => {\n          reset();\n        }}\n        disabled={animationState !== AnimationState.DONE}\n      >\n        Reset\n      </Button>\n      <Portal\n        closeOnTriggerClick\n        openOnTriggerClick\n        trigger={\n          <Button disabled={animationState === AnimationState.IN_PROGRESS}>\n            View History\n          </Button>\n        }\n        open={portalOpen}\n        onOpen={handleOpenPortal}\n        onClose={handleClosePortal}\n      >\n        <Segment\n          style={{\n            left: \"45%\",\n            position: \"fixed\",\n            top: \"20%\",\n            zIndex: 1000,\n          }}\n        >\n          <Header>History</Header>\n          <div style={{ overflow: \"scroll\", height: \"500px\" }}>\n            <List style={{ margin: \"1em\" }}>\n              {history.map((viz) => {\n                return (\n                  <div key={viz.id} style={{ margin: \"1em\" }}>\n                    <List.Item>Walls: {viz.numWalls}</List.Item>\n                    <List.Item>\n                      Time to complete: {viz.timeToComplete.toFixed(0)}ms\n                    </List.Item>\n                    <List.Item>Nodes Visited: {viz.nodesVisited}</List.Item>\n                    <List.Item>\n                      Created {moment(viz.created).fromNow()}\n                    </List.Item>\n                    <List.Item>\n                      <Button\n                        onClick={() => {\n                          restoreVisualization(viz.id, viz.numWalls);\n                          handleClosePortal();\n                        }}\n                      >\n                        Restore\n                      </Button>\n                    </List.Item>\n                  </div>\n                );\n              })}\n            </List>\n          </div>\n        </Segment>\n      </Portal>\n      <Container style={{ paddingTop: \"5em\" }}>\n        {grid.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                return (\n                  <Node\n                    key={nodeIndex}\n                    node={node}\n                    handleClick={(row, col) => handleClick(row, col)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n        <Header> Nodes visited: {nodesVisited}</Header>\n        <Header> Time to complete: {timeToComplete.toFixed(0)} ms</Header>\n      </Container>\n    </>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Board from \"./components/board/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}