{"version":3,"sources":["components/node/NodeComponent.tsx","components/node/Node.ts","algorithms/dijkstra.ts","components/board/Board.tsx","Nav.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["NodeComponent","node","className","state","id","row","column","distance","Infinity","NodeState","Node","previousNode","this","updateUnvisitedDistances","closestNode","grid","unvisitedNeighbors","getUnvisitedNeighbors","unvisitedNeighbor","push","length","filter","sortByDistance","nodes","sort","a","b","flattenGrid","results","forEach","Board","useState","setGrid","INITIAL_STATE","useEffect","initialGrid","rowIdx","columnIdx","getInitialGrid","animatePath","visitedNodes","shortestPath","nodeIndex","setTimeout","element","document","getElementById","textContent","Button","onClick","unvisitedNodes","shift","dijstra","finishNode","currentNode","unshift","getShortestPath","Container","style","paddingTop","map","key","Nav","Menu","inverted","Item","position","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6e2ac33.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport \"./Node.css\";\nimport Node from \"./Node\";\n\ninterface Props {\n  node: Node;\n}\n\nconst NodeComponent: FunctionComponent<Props> = ({ node }) => {\n  return (\n    <div className={`node ${node.state}`} id={`${node.row}-${node.column}`}>\n      {node.distance === Infinity ? \"?\" : node.distance}\n    </div>\n  );\n};\n\nexport default NodeComponent;\n","export const NodeState = {\n  EMPTY: \"empty\",\n  WALL: \"wall\",\n  VISITED: \"visited\",\n  SOURCE: \"source\",\n  TARGET: \"target\",\n};\n\nclass Node {\n  state: string;\n  distance: number;\n  column: number;\n  row: number;\n  previousNode?: Node;\n\n  constructor(\n    state: string,\n    distance: number,\n    column: number,\n    row: number,\n    previousNode?: Node\n  ) {\n    this.state = state;\n    this.distance = distance;\n    this.column = column;\n    this.row = row;\n    this.previousNode = previousNode;\n  }\n}\n\nexport default Node;\n","// Dijkstra's algorithm is a weighted algorithm that returns the shortest path.\n// It generates a shortest path tree with the given node as the root. As the algorithm runs,\n// It keeps track of two things:\n// 1) Vertices included in this shortest path tree (visted nodes)\n// 2) Vertices not included in the shortest path tree (unvisited nodes)\n// In each step of the algorithm, we find a vertex within the 2nd (unvisited) set and has the shortest\n// distance from the source. We then update the distance value.\n// In doing this, we keep track of the previous node that led us a a given node. Once the\n// algorithm completes, this 'previousNode' field gives us the path from the source to the target.\n\nimport Node, { NodeState } from \"../components/node/Node\";\n\nexport const dijstra = (grid: Node[][]): Node[] => {\n  const visitedNodes: Node[] = [];\n  const unvisitedNodes = flattenGrid(grid);\n\n  // Keep iterating through this loop as long as nodes exist that are not visited\n  while (!!unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode: Node | undefined = unvisitedNodes.shift();\n\n    // Skipping all walls\n    if (!closestNode || closestNode.state === NodeState.WALL) continue;\n\n    // If the closest node has a distance of Infinity, we have reached a trap\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    // If we have reached the target, return the visited nodes\n    if (closestNode.state === NodeState.TARGET) return visitedNodes;\n\n    closestNode.state = NodeState.VISITED;\n    visitedNodes.push(closestNode);\n\n    // Before going to the next iteration of the loop, we must update distances.\n    updateUnvisitedDistances(closestNode, grid);\n  }\n\n  return [];\n};\n\nconst updateUnvisitedDistances = (closestNode: Node, grid: Node[][]) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\n  for (const unvisitedNeighbor of unvisitedNeighbors) {\n    unvisitedNeighbor.distance = closestNode.distance + 1;\n    unvisitedNeighbor.previousNode = closestNode;\n  }\n};\n\n// Given a node, retrieve all unvisited neighbors to update their distance.\nconst getUnvisitedNeighbors = (closestNode: Node, grid: Node[][]): Node[] => {\n  const unvisitedNeighbors: Node[] = [];\n\n  const { row, column } = closestNode;\n\n  if (closestNode.column > 0) unvisitedNeighbors.push(grid[row][column - 1]);\n  if (closestNode.row > 0) unvisitedNeighbors.push(grid[row - 1][column]);\n\n  if (closestNode.column < grid[0].length - 1)\n    unvisitedNeighbors.push(grid[row][column + 1]);\n  if (closestNode.row < grid.length - 1)\n    unvisitedNeighbors.push(grid[row + 1][column]);\n\n  return unvisitedNeighbors.filter(\n    (node) => !(node.state === NodeState.VISITED)\n  );\n};\n\n// Sort a list of nodes distance given a comparator.\nconst sortByDistance = (nodes: Node[]): Node[] => {\n  return nodes.sort((a, b) => a.distance - b.distance);\n};\n\n// Given a grid, return a single array containing all nodes.\nconst flattenGrid = (grid: Node[][]): Node[] => {\n  const results: Node[] = [];\n  grid.forEach((row) => {\n    row.forEach((node) => results.push(node));\n  });\n  return results;\n};\n\nexport const getShortestPath = (finishNode: Node): Node[] => {\n  const shortestPath: Node[] = [];\n  var currentNode: Node | undefined = finishNode;\n  while (currentNode != null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPath;\n};\n","import React, { useEffect, useState } from \"react\";\nimport NodeComponent from \"../node/NodeComponent\";\nimport { Container, Button } from \"semantic-ui-react\";\nimport Node, { NodeState } from \"../node/Node\";\nimport { dijstra, getShortestPath } from \"../../algorithms/dijkstra\";\n\nconst Board = () => {\n  const [grid, setGrid] = useState([[]] as Node[][]);\n\n  const INITIAL_STATE = {\n    sourceRow: 14,\n    sourceColumn: 5,\n    targetColumn: 40,\n    targetRow: 14,\n  };\n\n  const getInitialGrid = () => {\n    // Creating an initial grid with empty cells\n    var initialGrid: Node[][] = [];\n    for (let rowIdx = 0; rowIdx < 30; rowIdx++) {\n      var row: Node[] = [];\n      for (let columnIdx = 0; columnIdx < 45; columnIdx++) {\n        row.push(new Node(NodeState.EMPTY, Infinity, columnIdx, rowIdx));\n      }\n      initialGrid.push(row);\n    }\n\n    // Fill grid with source and target\n    initialGrid[INITIAL_STATE.sourceRow][INITIAL_STATE.sourceColumn] = new Node(\n      NodeState.SOURCE,\n      0,\n      INITIAL_STATE.sourceColumn,\n      INITIAL_STATE.sourceRow\n    );\n    initialGrid[INITIAL_STATE.targetRow][INITIAL_STATE.targetColumn] = new Node(\n      NodeState.TARGET,\n      Infinity,\n      INITIAL_STATE.targetRow,\n      INITIAL_STATE.targetColumn\n    );\n\n    setGrid(initialGrid);\n  };\n\n  useEffect(() => {\n    getInitialGrid();\n    // eslint-disable-next-line\n  }, []);\n\n  const runDijstra = () => {\n    const visitedNodes = dijstra(grid);\n    const shortestPath = getShortestPath(\n      grid[INITIAL_STATE.targetRow][INITIAL_STATE.targetColumn]\n    );\n    animatePath(visitedNodes, shortestPath);\n  };\n\n  const animatePath = (visitedNodes: Node[], shortestPath: Node[]) => {\n    visitedNodes.forEach((node, nodeIndex) => {\n      setTimeout(() => {\n        const element = document.getElementById(`${node.row}-${node.column}`);\n        if (element != null) {\n          element.className = \"node visited\";\n          element.textContent = `${node.distance}`;\n        }\n      }, 100 * nodeIndex);\n    });\n  };\n\n  return (\n    <>\n      <Button onClick={runDijstra}>Animate Dijkstra</Button>\n      <Container style={{ paddingTop: \"5em\" }}>\n        {grid.map((column, columnIdx) => {\n          return column.map((row, rowIdx) => {\n            return (\n              <NodeComponent\n                key={`${columnIdx}-${rowIdx}`}\n                node={grid[columnIdx][rowIdx]}\n              />\n            );\n          });\n        })}\n      </Container>\n    </>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => (\n  <Menu inverted>\n    <Menu.Item>Pathfinding Visualizer</Menu.Item>\n    <Menu.Item position=\"right\">Created by Gregory Cheng</Menu.Item>\n  </Menu>\n);\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board/Board\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}